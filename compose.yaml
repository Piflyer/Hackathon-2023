# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  app:
    image: sid220/winterwonderland:latest
    build:
      context: .
#      target: final
    ports:
      - 8083:8083
    links:
      - db:database
    depends_on:
      - db
    volumes:
      - ./conf.php:/var/www/html/conf.php
  web:
    image: nginx:latest
    ports:
      - 8080:8080
    volumes:
      - ./public:/var/www/html/public
      - ./conf.php:/var/www/html/conf.php
      - ./default.conf:/etc/nginx/conf.d/default.conf
    links:
      - app
    depends_on:
      - app
  db:
    image: mariadb:latest
    environment:
      MARIADB_ROOT_PASSWORD: ""
      MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: true
    volumes:
      - ./db.sql:/docker-entrypoint-initdb.d/db.sql
      - ./ww_db_data:/var/lib/mysql:Z


    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 80:80
    #   -

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
